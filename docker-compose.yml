services:
    frontend:
        build:
            context: Frontend
            dockerfile: ../Dockerfiles/frontend.Dockerfile
        image: frontend
        container_name: frontend
        ports:
            - "${FRONT_PORT}:8080"
        restart: unless-stopped
        environment:
            - NODE_ENV=${ENV}
        depends_on:
            - backend

    backend:
        build:
            context: Backend
            dockerfile: ../Dockerfiles/backend.Dockerfile
        image: backend
        container_name: backend
        ports:
            - "${BACKEND_PORT}:8000"
        restart: unless-stopped
        environment:
            - PORT=${BACKEND_PORT} 
            - POSTGRES_HOST=${POSTGRES_HOST_LOCAL}
            - POSTGRES_PORT=${POSTGRES_PORT}
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - INSTANCE_CONNECTION_NAME=${INSTANCE_CONNECTION_NAME}
    nginx:
        image: nginx:alpine
        container_name: nginx
        restart: unless-stopped
        ports:
            - "80:80"
        volumes:
            - ./Nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro
        depends_on:
            - frontend
            - backend
    postgres:
        image: postgres:16-alpine
        container_name: postgres
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
        ports:
            - "5433:5432"
        volumes:
            - postgres_data:/var/lib/postgresql/data
        env_file:
            - .env
    redis:
        image: redis:7.0-alpine
        container_name: redis
        ports:
            - "${REDIS_PORT}:${REDIS_PORT}"
        volumes:
            - redis_data:/data
        command: ["redis-server", "--appendonly", "yes"]
        env_file:
            - .env
volumes:
    db-data:
    redis_data:
    postgres_data:
