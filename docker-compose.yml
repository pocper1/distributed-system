services:
    frontend:
        build:
            context: Frontend
            dockerfile: ../Dockerfiles/frontend.Dockerfile
        image: frontend
        container_name: frontend
        ports:
            - "3000:80"
        restart: unless-stopped
        environment:
            - NODE_ENV=production
            - REACT_APP_API_URL=${REACT_APP_API_URL}
        depends_on:
            - backend

    backend:
        build:
            context: Backend
            dockerfile: ../Dockerfiles/backend.Dockerfile
        image: backend
        container_name: backend
        ports:
            - "8000:8000"
        restart: unless-stopped
        environment:
            - POSTGRES_HOST=${POSTGRES_HOST}
            - POSTGRES_PORT=${POSTGRES_PORT}
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - INSTANCE_CONNECTION_NAME=${INSTANCE_CONNECTION_NAME}
            - REDIS_HOST=${REDIS_HOST}
            - REDIS_PORT=${REDIS_PORT}
        depends_on:
            - db
            - redis
    db:
        image: postgres:13
        restart: unless-stopped
        container_name: db
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
        ports:
            - "5432:5432"
        volumes:
            - db-data:/var/lib/postgresql/data
            - ./DB:/docker-entrypoint-initdb.d 
    redis:
        image: redis:7
        container_name: redis
        restart: always
        ports:
            - "6379:6379"
        volumes:
            - redis_data:/data
    
    nginx:
        image: nginx:alpine
        container_name: nginx
        restart: unless-stopped
        ports:
            - "80:80"
        volumes:
            - ./Nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro
        depends_on:
            - frontend
            - backend

volumes:
    db-data:
    redis_data:
